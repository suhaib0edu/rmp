// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'services/local/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(4, 8715666431473424638),
      name: 'CategoryDB',
      lastPropertyId: const IdUid(5, 798507028847208915),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5645046585955086477),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5939065700281882335),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 435529101485807528)),
        ModelProperty(
            id: const IdUid(4, 6060033286032198948),
            name: 'serverID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 798507028847208915),
            name: 'isVisible',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 3247930428776975403),
            name: 'products',
            targetId: const IdUid(5, 8495800287671342236))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 8495800287671342236),
      name: 'ProductsDB',
      lastPropertyId: const IdUid(13, 7649540744766023936),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1670008689984023988),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 8035321708266396993),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6010569588892415387),
            name: 'price',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7782558754848394664),
            name: 'tax',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1488464936615722266),
            name: 'discount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4445332278238693988),
            name: 'serverID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6037153654198111107),
            name: 'num',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8866477794268746545),
            name: 'isSelect',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 1931490235587273167),
      name: 'UserDB',
      lastPropertyId: const IdUid(13, 1452024386275277859),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 36452735215272390),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7919336593507633259),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7581029697519353475),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5324381029740108027),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7831420103405853788),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5961686032200997510),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6119543235390826185),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1200095383091929483),
            name: 'state',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7482844341439715935),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6703804886791506084),
            name: 'restaurantName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3119167349901789309),
            name: 'lastLogin',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4991074662744040923),
            name: 'dateJoined',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1452024386275277859),
            name: 'serverID',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 1191071951771645428),
      name: 'OrderDB',
      lastPropertyId: const IdUid(10, 446419512849324517),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3465487230447814970),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7349298684745273236),
            name: 'serverID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6458736963500969509),
            name: 'isLocal',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2448058876312341054),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1485829174014952746),
            name: 'cashier',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8708837412379678295),
            name: 'pName',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5204508799646117758),
            name: 'pNum',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5607146051710753931),
            name: 'pPrice',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8207215215487844115),
            name: 'pTax',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 446419512849324517),
            name: 'pDiscount',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'products',
            srcEntity: 'ProductsForOrderDB',
            srcField: 'order')
      ]),
  ModelEntity(
      id: const IdUid(9, 5552274399631520786),
      name: 'ProductsForOrderDB',
      lastPropertyId: const IdUid(8, 3564234990415245003),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2204852089189576327),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3825177778320396429),
            name: 'serverID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5330742047627280510),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3129006412382490449),
            name: 'price',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3707983089092768784),
            name: 'tax',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4014969054662501920),
            name: 'discount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7554116511856613443),
            name: 'num',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3564234990415245003),
            name: 'orderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 5512228125240586171),
            relationTarget: 'OrderDB')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(9, 5552274399631520786),
      lastIndexId: const IdUid(10, 5512228125240586171),
      lastRelationId: const IdUid(4, 4604228141634524560),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        4658692398430121399,
        6164768943427883643,
        5594130170998684037,
        1781338059561684753
      ],
      retiredIndexUids: const [
        291984406720970486,
        384858477119636503,
        6998827889582844087,
        7276057871159736914,
        2940009414949342225,
        3637124777129139603
      ],
      retiredPropertyUids: const [
        7991683734762392080,
        140832536613578140,
        385478906245408483,
        8483890488492593482,
        6666881026347308721,
        2688988889895510567,
        465484743609517891,
        3890229869076631873,
        3411223818710236672,
        2315606162713804884,
        7550605911058935495,
        1933509944080630960,
        1561660224350413754,
        2983609011102848759,
        7205780534514288749,
        7166853665062370037,
        2472484401749808141,
        480338331152813370,
        1039279157071255461,
        6123228684370520734,
        2879853474132317440,
        4468740718654307394,
        924786617698964368,
        9024225116526605600,
        5994602171102666831,
        4389262699145661179,
        6520267604588672963,
        7523594336123593060,
        6822477547729220924,
        2531955768443694586,
        7659665985392158937,
        4820139890460835629,
        7649540744766023936,
        8083794403954811225
      ],
      retiredRelationUids: const [
        3575914257858153654,
        8554853047031380376,
        4604228141634524560
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CategoryDB: EntityDefinition<CategoryDB>(
        model: _entities[0],
        toOneRelations: (CategoryDB object) => [],
        toManyRelations: (CategoryDB object) =>
            {RelInfo<CategoryDB>.toMany(3, object.id): object.products},
        getId: (CategoryDB object) => object.id,
        setId: (CategoryDB object, int id) {
          object.id = id;
        },
        objectToFB: (CategoryDB object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(3, serverIDOffset);
          fbb.addBool(4, object.isVisible);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CategoryDB(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isVisible: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false));
          InternalToManyAccess.setRelInfo<CategoryDB>(
              object.products, store, RelInfo<CategoryDB>.toMany(3, object.id));
          return object;
        }),
    ProductsDB: EntityDefinition<ProductsDB>(
        model: _entities[1],
        toOneRelations: (ProductsDB object) => [],
        toManyRelations: (ProductsDB object) => {},
        getId: (ProductsDB object) => object.id,
        setId: (ProductsDB object, int id) {
          object.id = id;
        },
        objectToFB: (ProductsDB object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final priceOffset =
              object.price == null ? null : fbb.writeString(object.price!);
          final taxOffset =
              object.tax == null ? null : fbb.writeString(object.tax!);
          final discountOffset = object.discount == null
              ? null
              : fbb.writeString(object.discount!);
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, priceOffset);
          fbb.addOffset(4, taxOffset);
          fbb.addOffset(5, discountOffset);
          fbb.addOffset(8, serverIDOffset);
          fbb.addInt64(9, object.num);
          fbb.addBool(10, object.isSelect);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductsDB(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              price: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              tax: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              discount: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              num: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              isSelect: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 24, false));

          return object;
        }),
    UserDB: EntityDefinition<UserDB>(
        model: _entities[2],
        toOneRelations: (UserDB object) => [],
        toManyRelations: (UserDB object) => {},
        getId: (UserDB object) => object.id,
        setId: (UserDB object, int id) {
          object.id = id;
        },
        objectToFB: (UserDB object, fb.Builder fbb) {
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final restaurantNameOffset = object.restaurantName == null
              ? null
              : fbb.writeString(object.restaurantName!);
          final lastLoginOffset = object.lastLogin == null
              ? null
              : fbb.writeString(object.lastLogin!);
          final dateJoinedOffset = object.dateJoined == null
              ? null
              : fbb.writeString(object.dateJoined!);
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, firstNameOffset);
          fbb.addOffset(5, lastNameOffset);
          fbb.addOffset(6, countryOffset);
          fbb.addOffset(7, stateOffset);
          fbb.addOffset(8, cityOffset);
          fbb.addOffset(9, restaurantNameOffset);
          fbb.addOffset(10, lastLoginOffset);
          fbb.addOffset(11, dateJoinedOffset);
          fbb.addOffset(12, serverIDOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserDB(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              state: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              city: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              restaurantName: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              lastLogin: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              dateJoined: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26));

          return object;
        }),
    OrderDB: EntityDefinition<OrderDB>(
        model: _entities[3],
        toOneRelations: (OrderDB object) => [],
        toManyRelations: (OrderDB object) => {
              RelInfo<ProductsForOrderDB>.toOneBacklink(8, object.id,
                      (ProductsForOrderDB srcObject) => srcObject.order):
                  object.products
            },
        getId: (OrderDB object) => object.id,
        setId: (OrderDB object, int id) {
          object.id = id;
        },
        objectToFB: (OrderDB object, fb.Builder fbb) {
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          final cashierOffset =
              object.cashier == null ? null : fbb.writeString(object.cashier!);
          final pNameOffset = fbb.writeList(
              object.pName.map(fbb.writeString).toList(growable: false));
          final pNumOffset = fbb.writeListInt64(object.pNum);
          final pPriceOffset = fbb.writeList(
              object.pPrice.map(fbb.writeString).toList(growable: false));
          final pTaxOffset = fbb.writeList(
              object.pTax.map(fbb.writeString).toList(growable: false));
          final pDiscountOffset = fbb.writeList(
              object.pDiscount.map(fbb.writeString).toList(growable: false));
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serverIDOffset);
          fbb.addBool(2, object.isLocal);
          fbb.addInt64(3, object.date?.millisecondsSinceEpoch);
          fbb.addOffset(4, cashierOffset);
          fbb.addOffset(5, pNameOffset);
          fbb.addOffset(6, pNumOffset);
          fbb.addOffset(7, pPriceOffset);
          fbb.addOffset(8, pTaxOffset);
          fbb.addOffset(9, pDiscountOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = OrderDB(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isLocal:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              date: dateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dateValue),
              cashier: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              pName: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 14, []),
              pNum: const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 16, []),
              pPrice: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 18, []),
              pTax: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 20, []),
              pDiscount:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 22, []));
          InternalToManyAccess.setRelInfo<OrderDB>(
              object.products,
              store,
              RelInfo<ProductsForOrderDB>.toOneBacklink(8, object.id,
                  (ProductsForOrderDB srcObject) => srcObject.order));
          return object;
        }),
    ProductsForOrderDB: EntityDefinition<ProductsForOrderDB>(
        model: _entities[4],
        toOneRelations: (ProductsForOrderDB object) => [object.order],
        toManyRelations: (ProductsForOrderDB object) => {},
        getId: (ProductsForOrderDB object) => object.id,
        setId: (ProductsForOrderDB object, int id) {
          object.id = id;
        },
        objectToFB: (ProductsForOrderDB object, fb.Builder fbb) {
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final priceOffset =
              object.price == null ? null : fbb.writeString(object.price!);
          final taxOffset =
              object.tax == null ? null : fbb.writeString(object.tax!);
          final discountOffset = object.discount == null
              ? null
              : fbb.writeString(object.discount!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serverIDOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, priceOffset);
          fbb.addOffset(4, taxOffset);
          fbb.addOffset(5, discountOffset);
          fbb.addInt64(6, object.num);
          fbb.addInt64(7, object.order.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductsForOrderDB(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              price: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              tax: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              discount: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              num: const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          object.order.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.order.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CategoryDB] entity fields to define ObjectBox queries.
class CategoryDB_ {
  /// see [CategoryDB.id]
  static final id =
      QueryIntegerProperty<CategoryDB>(_entities[0].properties[0]);

  /// see [CategoryDB.name]
  static final name =
      QueryStringProperty<CategoryDB>(_entities[0].properties[1]);

  /// see [CategoryDB.serverID]
  static final serverID =
      QueryStringProperty<CategoryDB>(_entities[0].properties[2]);

  /// see [CategoryDB.isVisible]
  static final isVisible =
      QueryBooleanProperty<CategoryDB>(_entities[0].properties[3]);

  /// see [CategoryDB.products]
  static final products =
      QueryRelationToMany<CategoryDB, ProductsDB>(_entities[0].relations[0]);
}

/// [ProductsDB] entity fields to define ObjectBox queries.
class ProductsDB_ {
  /// see [ProductsDB.id]
  static final id =
      QueryIntegerProperty<ProductsDB>(_entities[1].properties[0]);

  /// see [ProductsDB.name]
  static final name =
      QueryStringProperty<ProductsDB>(_entities[1].properties[1]);

  /// see [ProductsDB.price]
  static final price =
      QueryStringProperty<ProductsDB>(_entities[1].properties[2]);

  /// see [ProductsDB.tax]
  static final tax =
      QueryStringProperty<ProductsDB>(_entities[1].properties[3]);

  /// see [ProductsDB.discount]
  static final discount =
      QueryStringProperty<ProductsDB>(_entities[1].properties[4]);

  /// see [ProductsDB.serverID]
  static final serverID =
      QueryStringProperty<ProductsDB>(_entities[1].properties[5]);

  /// see [ProductsDB.num]
  static final num =
      QueryIntegerProperty<ProductsDB>(_entities[1].properties[6]);

  /// see [ProductsDB.isSelect]
  static final isSelect =
      QueryBooleanProperty<ProductsDB>(_entities[1].properties[7]);
}

/// [UserDB] entity fields to define ObjectBox queries.
class UserDB_ {
  /// see [UserDB.id]
  static final id = QueryIntegerProperty<UserDB>(_entities[2].properties[0]);

  /// see [UserDB.username]
  static final username =
      QueryStringProperty<UserDB>(_entities[2].properties[1]);

  /// see [UserDB.email]
  static final email = QueryStringProperty<UserDB>(_entities[2].properties[2]);

  /// see [UserDB.phone]
  static final phone = QueryStringProperty<UserDB>(_entities[2].properties[3]);

  /// see [UserDB.firstName]
  static final firstName =
      QueryStringProperty<UserDB>(_entities[2].properties[4]);

  /// see [UserDB.lastName]
  static final lastName =
      QueryStringProperty<UserDB>(_entities[2].properties[5]);

  /// see [UserDB.country]
  static final country =
      QueryStringProperty<UserDB>(_entities[2].properties[6]);

  /// see [UserDB.state]
  static final state = QueryStringProperty<UserDB>(_entities[2].properties[7]);

  /// see [UserDB.city]
  static final city = QueryStringProperty<UserDB>(_entities[2].properties[8]);

  /// see [UserDB.restaurantName]
  static final restaurantName =
      QueryStringProperty<UserDB>(_entities[2].properties[9]);

  /// see [UserDB.lastLogin]
  static final lastLogin =
      QueryStringProperty<UserDB>(_entities[2].properties[10]);

  /// see [UserDB.dateJoined]
  static final dateJoined =
      QueryStringProperty<UserDB>(_entities[2].properties[11]);

  /// see [UserDB.serverID]
  static final serverID =
      QueryStringProperty<UserDB>(_entities[2].properties[12]);
}

/// [OrderDB] entity fields to define ObjectBox queries.
class OrderDB_ {
  /// see [OrderDB.id]
  static final id = QueryIntegerProperty<OrderDB>(_entities[3].properties[0]);

  /// see [OrderDB.serverID]
  static final serverID =
      QueryStringProperty<OrderDB>(_entities[3].properties[1]);

  /// see [OrderDB.isLocal]
  static final isLocal =
      QueryBooleanProperty<OrderDB>(_entities[3].properties[2]);

  /// see [OrderDB.date]
  static final date = QueryIntegerProperty<OrderDB>(_entities[3].properties[3]);

  /// see [OrderDB.cashier]
  static final cashier =
      QueryStringProperty<OrderDB>(_entities[3].properties[4]);

  /// see [OrderDB.pName]
  static final pName =
      QueryStringVectorProperty<OrderDB>(_entities[3].properties[5]);

  /// see [OrderDB.pNum]
  static final pNum =
      QueryIntegerVectorProperty<OrderDB>(_entities[3].properties[6]);

  /// see [OrderDB.pPrice]
  static final pPrice =
      QueryStringVectorProperty<OrderDB>(_entities[3].properties[7]);

  /// see [OrderDB.pTax]
  static final pTax =
      QueryStringVectorProperty<OrderDB>(_entities[3].properties[8]);

  /// see [OrderDB.pDiscount]
  static final pDiscount =
      QueryStringVectorProperty<OrderDB>(_entities[3].properties[9]);
}

/// [ProductsForOrderDB] entity fields to define ObjectBox queries.
class ProductsForOrderDB_ {
  /// see [ProductsForOrderDB.id]
  static final id =
      QueryIntegerProperty<ProductsForOrderDB>(_entities[4].properties[0]);

  /// see [ProductsForOrderDB.serverID]
  static final serverID =
      QueryStringProperty<ProductsForOrderDB>(_entities[4].properties[1]);

  /// see [ProductsForOrderDB.name]
  static final name =
      QueryStringProperty<ProductsForOrderDB>(_entities[4].properties[2]);

  /// see [ProductsForOrderDB.price]
  static final price =
      QueryStringProperty<ProductsForOrderDB>(_entities[4].properties[3]);

  /// see [ProductsForOrderDB.tax]
  static final tax =
      QueryStringProperty<ProductsForOrderDB>(_entities[4].properties[4]);

  /// see [ProductsForOrderDB.discount]
  static final discount =
      QueryStringProperty<ProductsForOrderDB>(_entities[4].properties[5]);

  /// see [ProductsForOrderDB.num]
  static final num =
      QueryIntegerProperty<ProductsForOrderDB>(_entities[4].properties[6]);

  /// see [ProductsForOrderDB.order]
  static final order = QueryRelationToOne<ProductsForOrderDB, OrderDB>(
      _entities[4].properties[7]);
}
