// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'services/local/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8930938975101338832),
      name: 'AddressSL',
      lastPropertyId: const IdUid(7, 8471295738474448862),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7202190493196165488),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5793519267990028540),
            name: 'serverID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 4072555361392810003)),
        ModelProperty(
            id: const IdUid(3, 5495518609562872402),
            name: 'isUpload',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7293174354625401061),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3269430758097823187),
            name: 'state',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7558945077389842255),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8471295738474448862),
            name: 'neighborhood',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7713022840894197408),
      name: 'CategorySL',
      lastPropertyId: const IdUid(5, 6371226678470836996),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 452686987100607744),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7017965293937103901),
            name: 'serverID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 3105560499276591747)),
        ModelProperty(
            id: const IdUid(3, 6008236633053425668),
            name: 'isUpload',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3143833185463859946),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 7953153844780933882)),
        ModelProperty(
            id: const IdUid(5, 6371226678470836996),
            name: 'isVisible',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 2861283438949451480),
            name: 'products',
            targetId: const IdUid(5, 2527385424024604552))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 3711582294349742636),
      name: 'ConfigDB',
      lastPropertyId: const IdUid(12, 8047835003916484375),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6174041724601320519),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 550797464734499582),
            name: 'token',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1118678203256692409),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 63212286187983040),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2152958770467388544),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8151104725116066760),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5233626612281625058),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4198384768116532384),
            name: 'roles',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2712286144097424353),
            name: 'exSubscriptions',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4886975065281694829),
            name: 'isSubscription',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 9156127011742703333),
            name: 'isSubscriptionWindows',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8047835003916484375),
            name: 'isSubscriptionPhone',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 8954407619945010109),
      name: 'OrdersSL',
      lastPropertyId: const IdUid(5, 2628220239065257631),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8798306837290885057),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7861811827517613033),
            name: 'serverID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 7666866414263486525)),
        ModelProperty(
            id: const IdUid(3, 8669642288014043002),
            name: 'isUpload',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2942688066458588350),
            name: 'orderType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2628220239065257631),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'products', srcEntity: 'ProductsOrderSL', srcField: 'order')
      ]),
  ModelEntity(
      id: const IdUid(5, 2527385424024604552),
      name: 'ProductsSL',
      lastPropertyId: const IdUid(9, 5767971077725869636),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4060953994091482798),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2662287580321388312),
            name: 'serverID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 5546500329153629509)),
        ModelProperty(
            id: const IdUid(3, 8852246852820473737),
            name: 'isUpload',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5273858203360173451),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(6, 6944627489254679891)),
        ModelProperty(
            id: const IdUid(5, 6452624588618952201),
            name: 'price',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2299808621929319754),
            name: 'tax',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4389040419708229813),
            name: 'discount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2009854929028939083),
            name: 'num',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5767971077725869636),
            name: 'isSelect',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 7339304904525251576),
      name: 'RestaurantSL',
      lastPropertyId: const IdUid(4, 3243244205175151679),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8723524125635795703),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7760401063470083150),
            name: 'serverID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(7, 7594925139735076436)),
        ModelProperty(
            id: const IdUid(3, 5196963891679385968),
            name: 'isUpload',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3243244205175151679),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(8, 9089268365640714903))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 8250017338964247324),
            name: 'category',
            targetId: const IdUid(2, 7713022840894197408)),
        ModelRelation(
            id: const IdUid(4, 5763286858837207196),
            name: 'orders',
            targetId: const IdUid(4, 8954407619945010109)),
        ModelRelation(
            id: const IdUid(5, 7890721505012690739),
            name: 'products',
            targetId: const IdUid(5, 2527385424024604552)),
        ModelRelation(
            id: const IdUid(6, 4989228505352690858),
            name: 'subscriptions',
            targetId: const IdUid(8, 2194429276203149882))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 7446603980035264402),
      name: 'SecuritySL',
      lastPropertyId: const IdUid(5, 490225377256875238),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6750494604531498521),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 384822723257690856),
            name: 'serverID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(9, 7985036830416661431)),
        ModelProperty(
            id: const IdUid(3, 4578717578256039643),
            name: 'isUpload',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6410072630876527432),
            name: 'deviceDetails',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 490225377256875238),
            name: 'deviceType',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 2194429276203149882),
      name: 'SubscriptionsSL',
      lastPropertyId: const IdUid(6, 4010110865408409417),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 924888080823550031),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5290930712026557667),
            name: 'isUpload',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2604060853026330418),
            name: 'serverID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(10, 5797502430551848673)),
        ModelProperty(
            id: const IdUid(4, 8738225619789762483),
            name: 'edition',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5051079527867166809),
            name: 'subscriptionDate',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4010110865408409417),
            name: 'expiryDate',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 8062031036928262264),
      name: 'UserSL',
      lastPropertyId: const IdUid(8, 8941696615815920377),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6168997391225085070),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5535296982290471960),
            name: 'isUpload',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 444403196493245279),
            name: 'username',
            type: 9,
            flags: 2080,
            indexId: const IdUid(11, 921577664454349917)),
        ModelProperty(
            id: const IdUid(4, 6755355881931680069),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4643765603534553361),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5273689719206794005),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3142221339190007918),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8941696615815920377),
            name: 'roles',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 7366815354307148889),
            name: 'security',
            targetId: const IdUid(7, 7446603980035264402)),
        ModelRelation(
            id: const IdUid(8, 3135864514899200034),
            name: 'restaurant',
            targetId: const IdUid(6, 7339304904525251576))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 8828285585353863394),
      name: 'ProductsOrderSL',
      lastPropertyId: const IdUid(10, 3018079679018779441),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9211600892173530591),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1146807844102589195),
            name: 'serverID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(12, 8419012280679439404)),
        ModelProperty(
            id: const IdUid(3, 2818417062684010792),
            name: 'isUpload',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5915456129432402026),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8302407444085982578),
            name: 'price',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4702109404686925881),
            name: 'tax',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4034543222779268564),
            name: 'discount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2341693397062112357),
            name: 'num',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 193640633458377591),
            name: 'isSelect',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3018079679018779441),
            name: 'orderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 4045262936609755118),
            relationTarget: 'OrdersSL')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(10, 8828285585353863394),
      lastIndexId: const IdUid(14, 4045262936609755118),
      lastRelationId: const IdUid(8, 3135864514899200034),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [8265775163637562376],
      retiredPropertyUids: const [],
      retiredRelationUids: const [7032507891927946935],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AddressSL: EntityDefinition<AddressSL>(
        model: _entities[0],
        toOneRelations: (AddressSL object) => [],
        toManyRelations: (AddressSL object) => {},
        getId: (AddressSL object) => object.id,
        setId: (AddressSL object, int id) {
          object.id = id;
        },
        objectToFB: (AddressSL object, fb.Builder fbb) {
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final neighborhoodOffset = object.neighborhood == null
              ? null
              : fbb.writeString(object.neighborhood!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serverIDOffset);
          fbb.addBool(2, object.isUpload);
          fbb.addOffset(3, countryOffset);
          fbb.addOffset(4, stateOffset);
          fbb.addOffset(5, cityOffset);
          fbb.addOffset(6, neighborhoodOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AddressSL(
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isUpload:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              state: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              city: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              neighborhood: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    CategorySL: EntityDefinition<CategorySL>(
        model: _entities[1],
        toOneRelations: (CategorySL object) => [],
        toManyRelations: (CategorySL object) =>
            {RelInfo<CategorySL>.toMany(1, object.id): object.products},
        getId: (CategorySL object) => object.id,
        setId: (CategorySL object, int id) {
          object.id = id;
        },
        objectToFB: (CategorySL object, fb.Builder fbb) {
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serverIDOffset);
          fbb.addBool(2, object.isUpload);
          fbb.addOffset(3, nameOffset);
          fbb.addBool(4, object.isVisible);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CategorySL(
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isUpload:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..isVisible =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          InternalToManyAccess.setRelInfo<CategorySL>(
              object.products, store, RelInfo<CategorySL>.toMany(1, object.id));
          return object;
        }),
    ConfigDB: EntityDefinition<ConfigDB>(
        model: _entities[2],
        toOneRelations: (ConfigDB object) => [],
        toManyRelations: (ConfigDB object) => {},
        getId: (ConfigDB object) => object.id,
        setId: (ConfigDB object, int id) {
          object.id = id;
        },
        objectToFB: (ConfigDB object, fb.Builder fbb) {
          final tokenOffset =
              object.token == null ? null : fbb.writeString(object.token!);
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final rolesOffset =
              object.roles == null ? null : fbb.writeString(object.roles!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tokenOffset);
          fbb.addOffset(2, usernameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, firstNameOffset);
          fbb.addOffset(6, lastNameOffset);
          fbb.addOffset(7, rolesOffset);
          fbb.addInt64(8, object.exSubscriptions?.millisecondsSinceEpoch);
          fbb.addBool(9, object.isSubscription);
          fbb.addBool(10, object.isSubscriptionWindows);
          fbb.addBool(11, object.isSubscriptionPhone);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final exSubscriptionsValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = ConfigDB(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              token: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              roles: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              exSubscriptions: exSubscriptionsValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(exSubscriptionsValue),
              isSubscription: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22),
              isSubscriptionWindows: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24),
              isSubscriptionPhone: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26));

          return object;
        }),
    OrdersSL: EntityDefinition<OrdersSL>(
        model: _entities[3],
        toOneRelations: (OrdersSL object) => [],
        toManyRelations: (OrdersSL object) => {
              RelInfo<ProductsOrderSL>.toOneBacklink(10, object.id,
                      (ProductsOrderSL srcObject) => srcObject.order):
                  object.products
            },
        getId: (OrdersSL object) => object.id,
        setId: (OrdersSL object, int id) {
          object.id = id;
        },
        objectToFB: (OrdersSL object, fb.Builder fbb) {
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          final orderTypeOffset = object.orderType == null
              ? null
              : fbb.writeString(object.orderType!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serverIDOffset);
          fbb.addBool(2, object.isUpload);
          fbb.addOffset(3, orderTypeOffset);
          fbb.addInt64(4, object.date?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = OrdersSL(
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isUpload:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              orderType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              date: dateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dateValue))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<OrdersSL>(
              object.products,
              store,
              RelInfo<ProductsOrderSL>.toOneBacklink(10, object.id,
                  (ProductsOrderSL srcObject) => srcObject.order));
          return object;
        }),
    ProductsSL: EntityDefinition<ProductsSL>(
        model: _entities[4],
        toOneRelations: (ProductsSL object) => [],
        toManyRelations: (ProductsSL object) => {},
        getId: (ProductsSL object) => object.id,
        setId: (ProductsSL object, int id) {
          object.id = id;
        },
        objectToFB: (ProductsSL object, fb.Builder fbb) {
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final priceOffset =
              object.price == null ? null : fbb.writeString(object.price!);
          final taxOffset =
              object.tax == null ? null : fbb.writeString(object.tax!);
          final discountOffset = object.discount == null
              ? null
              : fbb.writeString(object.discount!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serverIDOffset);
          fbb.addBool(2, object.isUpload);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, priceOffset);
          fbb.addOffset(5, taxOffset);
          fbb.addOffset(6, discountOffset);
          fbb.addInt64(7, object.num);
          fbb.addBool(8, object.isSelect);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductsSL(
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isUpload:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              price: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              tax: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              discount: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              num: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              isSelect: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    RestaurantSL: EntityDefinition<RestaurantSL>(
        model: _entities[5],
        toOneRelations: (RestaurantSL object) => [],
        toManyRelations: (RestaurantSL object) => {
              RelInfo<RestaurantSL>.toMany(3, object.id): object.category,
              RelInfo<RestaurantSL>.toMany(4, object.id): object.orders,
              RelInfo<RestaurantSL>.toMany(5, object.id): object.products,
              RelInfo<RestaurantSL>.toMany(6, object.id): object.subscriptions
            },
        getId: (RestaurantSL object) => object.id,
        setId: (RestaurantSL object, int id) {
          object.id = id;
        },
        objectToFB: (RestaurantSL object, fb.Builder fbb) {
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serverIDOffset);
          fbb.addBool(2, object.isUpload);
          fbb.addOffset(3, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RestaurantSL(
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isUpload:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<RestaurantSL>(object.category, store,
              RelInfo<RestaurantSL>.toMany(3, object.id));
          InternalToManyAccess.setRelInfo<RestaurantSL>(
              object.orders, store, RelInfo<RestaurantSL>.toMany(4, object.id));
          InternalToManyAccess.setRelInfo<RestaurantSL>(object.products, store,
              RelInfo<RestaurantSL>.toMany(5, object.id));
          InternalToManyAccess.setRelInfo<RestaurantSL>(object.subscriptions,
              store, RelInfo<RestaurantSL>.toMany(6, object.id));
          return object;
        }),
    SecuritySL: EntityDefinition<SecuritySL>(
        model: _entities[6],
        toOneRelations: (SecuritySL object) => [],
        toManyRelations: (SecuritySL object) => {},
        getId: (SecuritySL object) => object.id,
        setId: (SecuritySL object, int id) {
          object.id = id;
        },
        objectToFB: (SecuritySL object, fb.Builder fbb) {
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          final deviceDetailsOffset = object.deviceDetails == null
              ? null
              : fbb.writeString(object.deviceDetails!);
          final deviceTypeOffset = object.deviceType == null
              ? null
              : fbb.writeString(object.deviceType!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serverIDOffset);
          fbb.addBool(2, object.isUpload);
          fbb.addOffset(3, deviceDetailsOffset);
          fbb.addOffset(4, deviceTypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SecuritySL(
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isUpload:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              deviceDetails: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              deviceType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    SubscriptionsSL: EntityDefinition<SubscriptionsSL>(
        model: _entities[7],
        toOneRelations: (SubscriptionsSL object) => [],
        toManyRelations: (SubscriptionsSL object) => {},
        getId: (SubscriptionsSL object) => object.id,
        setId: (SubscriptionsSL object, int id) {
          object.id = id;
        },
        objectToFB: (SubscriptionsSL object, fb.Builder fbb) {
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          final editionOffset =
              object.edition == null ? null : fbb.writeString(object.edition!);
          final subscriptionDateOffset = object.subscriptionDate == null
              ? null
              : fbb.writeString(object.subscriptionDate!);
          final expiryDateOffset = object.expiryDate == null
              ? null
              : fbb.writeString(object.expiryDate!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.isUpload);
          fbb.addOffset(2, serverIDOffset);
          fbb.addOffset(3, editionOffset);
          fbb.addOffset(4, subscriptionDateOffset);
          fbb.addOffset(5, expiryDateOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SubscriptionsSL(
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              isUpload:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false),
              edition: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              subscriptionDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              expiryDate: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    UserSL: EntityDefinition<UserSL>(
        model: _entities[8],
        toOneRelations: (UserSL object) => [],
        toManyRelations: (UserSL object) => {
              RelInfo<UserSL>.toMany(7, object.id): object.security,
              RelInfo<UserSL>.toMany(8, object.id): object.restaurant
            },
        getId: (UserSL object) => object.id,
        setId: (UserSL object, int id) {
          object.id = id;
        },
        objectToFB: (UserSL object, fb.Builder fbb) {
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final rolesOffset =
              object.roles == null ? null : fbb.writeString(object.roles!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.isUpload);
          fbb.addOffset(2, usernameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, firstNameOffset);
          fbb.addOffset(6, lastNameOffset);
          fbb.addOffset(7, rolesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserSL(
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              isUpload:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              roles: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<UserSL>(
              object.security, store, RelInfo<UserSL>.toMany(7, object.id));
          InternalToManyAccess.setRelInfo<UserSL>(
              object.restaurant, store, RelInfo<UserSL>.toMany(8, object.id));
          return object;
        }),
    ProductsOrderSL: EntityDefinition<ProductsOrderSL>(
        model: _entities[9],
        toOneRelations: (ProductsOrderSL object) => [object.order],
        toManyRelations: (ProductsOrderSL object) => {},
        getId: (ProductsOrderSL object) => object.id,
        setId: (ProductsOrderSL object, int id) {
          object.id = id;
        },
        objectToFB: (ProductsOrderSL object, fb.Builder fbb) {
          final serverIDOffset = object.serverID == null
              ? null
              : fbb.writeString(object.serverID!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final priceOffset =
              object.price == null ? null : fbb.writeString(object.price!);
          final taxOffset =
              object.tax == null ? null : fbb.writeString(object.tax!);
          final discountOffset = object.discount == null
              ? null
              : fbb.writeString(object.discount!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serverIDOffset);
          fbb.addBool(2, object.isUpload);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, priceOffset);
          fbb.addOffset(5, taxOffset);
          fbb.addOffset(6, discountOffset);
          fbb.addInt64(7, object.num);
          fbb.addBool(8, object.isSelect);
          fbb.addInt64(9, object.order.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductsOrderSL(
              serverID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              isUpload:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              price: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              tax: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              discount: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              num: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              isSelect: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.order.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.order.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AddressSL] entity fields to define ObjectBox queries.
class AddressSL_ {
  /// see [AddressSL.id]
  static final id = QueryIntegerProperty<AddressSL>(_entities[0].properties[0]);

  /// see [AddressSL.serverID]
  static final serverID =
      QueryStringProperty<AddressSL>(_entities[0].properties[1]);

  /// see [AddressSL.isUpload]
  static final isUpload =
      QueryBooleanProperty<AddressSL>(_entities[0].properties[2]);

  /// see [AddressSL.country]
  static final country =
      QueryStringProperty<AddressSL>(_entities[0].properties[3]);

  /// see [AddressSL.state]
  static final state =
      QueryStringProperty<AddressSL>(_entities[0].properties[4]);

  /// see [AddressSL.city]
  static final city =
      QueryStringProperty<AddressSL>(_entities[0].properties[5]);

  /// see [AddressSL.neighborhood]
  static final neighborhood =
      QueryStringProperty<AddressSL>(_entities[0].properties[6]);
}

/// [CategorySL] entity fields to define ObjectBox queries.
class CategorySL_ {
  /// see [CategorySL.id]
  static final id =
      QueryIntegerProperty<CategorySL>(_entities[1].properties[0]);

  /// see [CategorySL.serverID]
  static final serverID =
      QueryStringProperty<CategorySL>(_entities[1].properties[1]);

  /// see [CategorySL.isUpload]
  static final isUpload =
      QueryBooleanProperty<CategorySL>(_entities[1].properties[2]);

  /// see [CategorySL.name]
  static final name =
      QueryStringProperty<CategorySL>(_entities[1].properties[3]);

  /// see [CategorySL.isVisible]
  static final isVisible =
      QueryBooleanProperty<CategorySL>(_entities[1].properties[4]);

  /// see [CategorySL.products]
  static final products =
      QueryRelationToMany<CategorySL, ProductsSL>(_entities[1].relations[0]);
}

/// [ConfigDB] entity fields to define ObjectBox queries.
class ConfigDB_ {
  /// see [ConfigDB.id]
  static final id = QueryIntegerProperty<ConfigDB>(_entities[2].properties[0]);

  /// see [ConfigDB.token]
  static final token =
      QueryStringProperty<ConfigDB>(_entities[2].properties[1]);

  /// see [ConfigDB.username]
  static final username =
      QueryStringProperty<ConfigDB>(_entities[2].properties[2]);

  /// see [ConfigDB.email]
  static final email =
      QueryStringProperty<ConfigDB>(_entities[2].properties[3]);

  /// see [ConfigDB.phone]
  static final phone =
      QueryStringProperty<ConfigDB>(_entities[2].properties[4]);

  /// see [ConfigDB.firstName]
  static final firstName =
      QueryStringProperty<ConfigDB>(_entities[2].properties[5]);

  /// see [ConfigDB.lastName]
  static final lastName =
      QueryStringProperty<ConfigDB>(_entities[2].properties[6]);

  /// see [ConfigDB.roles]
  static final roles =
      QueryStringProperty<ConfigDB>(_entities[2].properties[7]);

  /// see [ConfigDB.exSubscriptions]
  static final exSubscriptions =
      QueryIntegerProperty<ConfigDB>(_entities[2].properties[8]);

  /// see [ConfigDB.isSubscription]
  static final isSubscription =
      QueryBooleanProperty<ConfigDB>(_entities[2].properties[9]);

  /// see [ConfigDB.isSubscriptionWindows]
  static final isSubscriptionWindows =
      QueryBooleanProperty<ConfigDB>(_entities[2].properties[10]);

  /// see [ConfigDB.isSubscriptionPhone]
  static final isSubscriptionPhone =
      QueryBooleanProperty<ConfigDB>(_entities[2].properties[11]);
}

/// [OrdersSL] entity fields to define ObjectBox queries.
class OrdersSL_ {
  /// see [OrdersSL.id]
  static final id = QueryIntegerProperty<OrdersSL>(_entities[3].properties[0]);

  /// see [OrdersSL.serverID]
  static final serverID =
      QueryStringProperty<OrdersSL>(_entities[3].properties[1]);

  /// see [OrdersSL.isUpload]
  static final isUpload =
      QueryBooleanProperty<OrdersSL>(_entities[3].properties[2]);

  /// see [OrdersSL.orderType]
  static final orderType =
      QueryStringProperty<OrdersSL>(_entities[3].properties[3]);

  /// see [OrdersSL.date]
  static final date =
      QueryIntegerProperty<OrdersSL>(_entities[3].properties[4]);
}

/// [ProductsSL] entity fields to define ObjectBox queries.
class ProductsSL_ {
  /// see [ProductsSL.id]
  static final id =
      QueryIntegerProperty<ProductsSL>(_entities[4].properties[0]);

  /// see [ProductsSL.serverID]
  static final serverID =
      QueryStringProperty<ProductsSL>(_entities[4].properties[1]);

  /// see [ProductsSL.isUpload]
  static final isUpload =
      QueryBooleanProperty<ProductsSL>(_entities[4].properties[2]);

  /// see [ProductsSL.name]
  static final name =
      QueryStringProperty<ProductsSL>(_entities[4].properties[3]);

  /// see [ProductsSL.price]
  static final price =
      QueryStringProperty<ProductsSL>(_entities[4].properties[4]);

  /// see [ProductsSL.tax]
  static final tax =
      QueryStringProperty<ProductsSL>(_entities[4].properties[5]);

  /// see [ProductsSL.discount]
  static final discount =
      QueryStringProperty<ProductsSL>(_entities[4].properties[6]);

  /// see [ProductsSL.num]
  static final num =
      QueryIntegerProperty<ProductsSL>(_entities[4].properties[7]);

  /// see [ProductsSL.isSelect]
  static final isSelect =
      QueryBooleanProperty<ProductsSL>(_entities[4].properties[8]);
}

/// [RestaurantSL] entity fields to define ObjectBox queries.
class RestaurantSL_ {
  /// see [RestaurantSL.id]
  static final id =
      QueryIntegerProperty<RestaurantSL>(_entities[5].properties[0]);

  /// see [RestaurantSL.serverID]
  static final serverID =
      QueryStringProperty<RestaurantSL>(_entities[5].properties[1]);

  /// see [RestaurantSL.isUpload]
  static final isUpload =
      QueryBooleanProperty<RestaurantSL>(_entities[5].properties[2]);

  /// see [RestaurantSL.name]
  static final name =
      QueryStringProperty<RestaurantSL>(_entities[5].properties[3]);

  /// see [RestaurantSL.category]
  static final category =
      QueryRelationToMany<RestaurantSL, CategorySL>(_entities[5].relations[0]);

  /// see [RestaurantSL.orders]
  static final orders =
      QueryRelationToMany<RestaurantSL, OrdersSL>(_entities[5].relations[1]);

  /// see [RestaurantSL.products]
  static final products =
      QueryRelationToMany<RestaurantSL, ProductsSL>(_entities[5].relations[2]);

  /// see [RestaurantSL.subscriptions]
  static final subscriptions =
      QueryRelationToMany<RestaurantSL, SubscriptionsSL>(
          _entities[5].relations[3]);
}

/// [SecuritySL] entity fields to define ObjectBox queries.
class SecuritySL_ {
  /// see [SecuritySL.id]
  static final id =
      QueryIntegerProperty<SecuritySL>(_entities[6].properties[0]);

  /// see [SecuritySL.serverID]
  static final serverID =
      QueryStringProperty<SecuritySL>(_entities[6].properties[1]);

  /// see [SecuritySL.isUpload]
  static final isUpload =
      QueryBooleanProperty<SecuritySL>(_entities[6].properties[2]);

  /// see [SecuritySL.deviceDetails]
  static final deviceDetails =
      QueryStringProperty<SecuritySL>(_entities[6].properties[3]);

  /// see [SecuritySL.deviceType]
  static final deviceType =
      QueryStringProperty<SecuritySL>(_entities[6].properties[4]);
}

/// [SubscriptionsSL] entity fields to define ObjectBox queries.
class SubscriptionsSL_ {
  /// see [SubscriptionsSL.id]
  static final id =
      QueryIntegerProperty<SubscriptionsSL>(_entities[7].properties[0]);

  /// see [SubscriptionsSL.isUpload]
  static final isUpload =
      QueryBooleanProperty<SubscriptionsSL>(_entities[7].properties[1]);

  /// see [SubscriptionsSL.serverID]
  static final serverID =
      QueryStringProperty<SubscriptionsSL>(_entities[7].properties[2]);

  /// see [SubscriptionsSL.edition]
  static final edition =
      QueryStringProperty<SubscriptionsSL>(_entities[7].properties[3]);

  /// see [SubscriptionsSL.subscriptionDate]
  static final subscriptionDate =
      QueryStringProperty<SubscriptionsSL>(_entities[7].properties[4]);

  /// see [SubscriptionsSL.expiryDate]
  static final expiryDate =
      QueryStringProperty<SubscriptionsSL>(_entities[7].properties[5]);
}

/// [UserSL] entity fields to define ObjectBox queries.
class UserSL_ {
  /// see [UserSL.id]
  static final id = QueryIntegerProperty<UserSL>(_entities[8].properties[0]);

  /// see [UserSL.isUpload]
  static final isUpload =
      QueryBooleanProperty<UserSL>(_entities[8].properties[1]);

  /// see [UserSL.username]
  static final username =
      QueryStringProperty<UserSL>(_entities[8].properties[2]);

  /// see [UserSL.email]
  static final email = QueryStringProperty<UserSL>(_entities[8].properties[3]);

  /// see [UserSL.phone]
  static final phone = QueryStringProperty<UserSL>(_entities[8].properties[4]);

  /// see [UserSL.firstName]
  static final firstName =
      QueryStringProperty<UserSL>(_entities[8].properties[5]);

  /// see [UserSL.lastName]
  static final lastName =
      QueryStringProperty<UserSL>(_entities[8].properties[6]);

  /// see [UserSL.roles]
  static final roles = QueryStringProperty<UserSL>(_entities[8].properties[7]);

  /// see [UserSL.security]
  static final security =
      QueryRelationToMany<UserSL, SecuritySL>(_entities[8].relations[0]);

  /// see [UserSL.restaurant]
  static final restaurant =
      QueryRelationToMany<UserSL, RestaurantSL>(_entities[8].relations[1]);
}

/// [ProductsOrderSL] entity fields to define ObjectBox queries.
class ProductsOrderSL_ {
  /// see [ProductsOrderSL.id]
  static final id =
      QueryIntegerProperty<ProductsOrderSL>(_entities[9].properties[0]);

  /// see [ProductsOrderSL.serverID]
  static final serverID =
      QueryStringProperty<ProductsOrderSL>(_entities[9].properties[1]);

  /// see [ProductsOrderSL.isUpload]
  static final isUpload =
      QueryBooleanProperty<ProductsOrderSL>(_entities[9].properties[2]);

  /// see [ProductsOrderSL.name]
  static final name =
      QueryStringProperty<ProductsOrderSL>(_entities[9].properties[3]);

  /// see [ProductsOrderSL.price]
  static final price =
      QueryStringProperty<ProductsOrderSL>(_entities[9].properties[4]);

  /// see [ProductsOrderSL.tax]
  static final tax =
      QueryStringProperty<ProductsOrderSL>(_entities[9].properties[5]);

  /// see [ProductsOrderSL.discount]
  static final discount =
      QueryStringProperty<ProductsOrderSL>(_entities[9].properties[6]);

  /// see [ProductsOrderSL.num]
  static final num =
      QueryIntegerProperty<ProductsOrderSL>(_entities[9].properties[7]);

  /// see [ProductsOrderSL.isSelect]
  static final isSelect =
      QueryBooleanProperty<ProductsOrderSL>(_entities[9].properties[8]);

  /// see [ProductsOrderSL.order]
  static final order =
      QueryRelationToOne<ProductsOrderSL, OrdersSL>(_entities[9].properties[9]);
}
